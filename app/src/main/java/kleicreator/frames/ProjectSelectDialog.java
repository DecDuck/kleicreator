package kleicreator.frames;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class ProjectSelectDialog {
    private JPanel ProjectSelectPanel;
    private JTable projectsListTable;
    private JButton newMod;
    private JButton loadMod;
    private JLabel titleLabel;
    private JScrollPane tableScrollPlane;
    private JButton configButton;

    public JPanel getProjectSelectPanel() {
        return ProjectSelectPanel;
    }

    public JTable getProjectsListTable() {
        return projectsListTable;
    }

    public JButton getNewMod() {
        return newMod;
    }

    public JButton getLoadMod() {
        return loadMod;
    }

    public JLabel getTitleLabel() {
        return titleLabel;
    }

    public JScrollPane getTableScrollPlane() {
        return tableScrollPlane;
    }

    public JButton getConfigButton() {
        return configButton;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        ProjectSelectPanel = new JPanel();
        ProjectSelectPanel.setLayout(new GridLayoutManager(4, 3, new Insets(20, 20, 20, 20), -1, -1));
        ProjectSelectPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        titleLabel = new JLabel();
        Font titleLabelFont = this.$$$getFont$$$("Arial", -1, 22, titleLabel.getFont());
        if (titleLabelFont != null) titleLabel.setFont(titleLabelFont);
        titleLabel.setIcon(new ImageIcon(getClass().getResource("/kleicreator/kleicreator_wide_small.png")));
        titleLabel.setText("");
        ProjectSelectPanel.add(titleLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tableScrollPlane = new JScrollPane();
        ProjectSelectPanel.add(tableScrollPlane, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        projectsListTable = new JTable();
        projectsListTable.setEnabled(true);
        tableScrollPlane.setViewportView(projectsListTable);
        newMod = new JButton();
        newMod.setHideActionText(false);
        newMod.setText("Create New Mod");
        ProjectSelectPanel.add(newMod, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loadMod = new JButton();
        loadMod.setText("Load Selected Mod");
        ProjectSelectPanel.add(loadMod, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        configButton = new JButton();
        Font configButtonFont = this.$$$getFont$$$(null, -1, 24, configButton.getFont());
        if (configButtonFont != null) configButton.setFont(configButtonFont);
        configButton.setForeground(new Color(-1025));
        configButton.setHorizontalAlignment(0);
        configButton.setIcon(new ImageIcon(getClass().getResource("/icons/config.png")));
        configButton.setText("");
        configButton.setVerticalAlignment(0);
        configButton.setVerticalTextPosition(1);
        ProjectSelectPanel.add(configButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTHEAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return ProjectSelectPanel;
    }

}
